syntax = "proto3";
package evmos.dualstaking.v1;

import "evmos/dualstaking/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/evmos/v12/x/dualstaking/types";

// Query defines the gRPC querier service.
service Query {
  rpc StakingPosition(QueryStakingPositionRequest) returns (QueryStakingPositionResponse) {
    option (google.api.http).get = "/dualstaking/staking/{staker}/{stake_id}";
  }

  rpc DelegationPosition(QueryDelegationPositionRequest) returns (QueryDelegationPositionResponse) {
    option (google.api.http).get = "/dualstaking/delegation/{staker}/{delegation_id}";
  }

  // StakingPositionsByStaker queries all staking positions for a given staker
  rpc StakingPositionsByStaker(QueryStakingPositionsByStakerRequest) returns (QueryStakingPositionsByStakerResponse) {
    option (google.api.http).get = "/evmos/dualstaking/staking_positions_by_staker/{staker}";
  }

  // DelegationPositionsByStaker queries all delegation positions for a given staker
  rpc DelegationPositionsByStaker(QueryDelegationPositionsByStakerRequest) returns (QueryDelegationPositionsByStakerResponse) {
    option (google.api.http).get = "/evmos/dualstaking/delegation_positions_by_staker/{staker}";
  }
}

message QueryStakingPositionRequest {
  string staker = 1;
  string stake_id = 2;
}

message QueryStakingPositionResponse {
  StakingPosition staking_position = 1;
}

message QueryDelegationPositionRequest {
  string staker = 1;
  string delegation_id = 2;
}

message QueryDelegationPositionResponse {
  DelegationPosition delegation_position = 1;
}

// QueryStakingPositionsByStakerRequest is the request type for the Query/StakingPositionsByStaker RPC method
message QueryStakingPositionsByStakerRequest {
  string staker = 1;
}

// QueryStakingPositionsByStakerResponse is the response type for the Query/StakingPositionsByStaker RPC method
message QueryStakingPositionsByStakerResponse {
  repeated StakingPosition staking_positions = 1;
}

// QueryDelegationPositionsByStakerRequest is the request type for the Query/DelegationPositionsByStaker RPC method
message QueryDelegationPositionsByStakerRequest {
  string staker = 1;
}

// QueryDelegationPositionsByStakerResponse is the response type for the Query/DelegationPositionsByStaker RPC method
message QueryDelegationPositionsByStakerResponse {
  repeated DelegationPosition delegation_positions = 1;
}