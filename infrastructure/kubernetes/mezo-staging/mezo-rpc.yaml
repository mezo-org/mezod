apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mezo-rpc
  namespace: default
  annotations:
    kubernetes.io/ingress.global-static-ip-name: mezo-staging-rpc-external-ip
    ingress.gcp.kubernetes.io/pre-shared-cert: mezo-staging-rpc-ssl-certificate
spec:
  defaultBackend:
    service:
      name: mezo-rpc
      port:
        number: 8545

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mezo-rpc-ws
  namespace: default
  annotations:
    kubernetes.io/ingress.global-static-ip-name: mezo-staging-rpc-ws-external-ip
    ingress.gcp.kubernetes.io/pre-shared-cert: mezo-staging-rpc-ws-ssl-certificate
spec:
  defaultBackend:
    service:
      name: mezo-rpc
      port:
        number: 8546

---
apiVersion: v1
kind: Service
metadata:
  name: mezo-rpc
  namespace: default
  annotations:
    cloud.google.com/backend-config: '{"ports": {
      "json-rpc": "mezo-rpc-backend-config",
      "json-rpc-ws": "mezo-rpc-ws-backend-config"
    }}'
  labels:
    app: mezo
    type: rpc
spec:
  type: ClusterIP
  ports:
    - name: json-rpc
      port: 8545
      targetPort: json-rpc
    - name: json-rpc-ws
      port: 8546
      targetPort: json-rpc-ws
  selector:
    app: mezo
    type: node

---
# By default, the GCP ingress controller creates a load balancer whose health check
# issues an HTTP GET request against the target port and expects a 200 response in return.
# In our case, the target port is 8545. This is the EVM JSON-RPC server that does
# not support GET requests. To work around this issue, we create a custom
# health check that issues an HTTP GET request against the /status endpoint of the
# CometBFT RPC server. This is not ideal as we use a different port for
# health checks than for the actual traffic but this is acceptable for now.
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: mezo-rpc-backend-config
  namespace: default
spec:
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    port: 26657
    type: HTTP
    requestPath: /status

---
# Separate backend config for the WebSocket endpoint. Uses the same health check
# as `mezo-rpc-backend-config` but WebSocket needs different configuration
# for timeouts. If timeouts are low, the load balancer would reset the
# connection frequently and without any grace period.
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: mezo-rpc-ws-backend-config
  namespace: default
spec:
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    port: 26657
    type: HTTP
    requestPath: /status
  timeoutSec: 1800 # 30 minutes
  connectionDraining:
    drainingTimeoutSec: 1800 # 30 minutes
