// Code generated by MockGen. DO NOT EDIT.
// Source: bridge-worker/server.go
//
// Generated by this command:
//
//	mockgen -source=bridge-worker/server.go -destination=bridge-worker/mock_mezo_bridge_test.go -package=bridgeworker MezoBridge
//

// Package bridgeworker is a generated GoMock package.
package bridgeworker

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	portal "github.com/mezo-org/mezod/ethereum/bindings/portal"
	gomock "go.uber.org/mock/gomock"
)

// MockMezoBridge is a mock of MezoBridge interface.
type MockMezoBridge struct {
	ctrl     *gomock.Controller
	recorder *MockMezoBridgeMockRecorder
	isgomock struct{}
}

// MockMezoBridgeMockRecorder is the mock recorder for MockMezoBridge.
type MockMezoBridgeMockRecorder struct {
	mock *MockMezoBridge
}

// NewMockMezoBridge creates a new mock instance.
func NewMockMezoBridge(ctrl *gomock.Controller) *MockMezoBridge {
	mock := &MockMezoBridge{ctrl: ctrl}
	mock.recorder = &MockMezoBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMezoBridge) EXPECT() *MockMezoBridgeMockRecorder {
	return m.recorder
}

// ConfirmedUnlocks mocks base method.
func (m *MockMezoBridge) ConfirmedUnlocks(arg0 *big.Int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmedUnlocks", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmedUnlocks indicates an expected call of ConfirmedUnlocks.
func (mr *MockMezoBridgeMockRecorder) ConfirmedUnlocks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmedUnlocks", reflect.TypeOf((*MockMezoBridge)(nil).ConfirmedUnlocks), arg0)
}

// ValidateAssetsUnlocked mocks base method.
func (m *MockMezoBridge) ValidateAssetsUnlocked(arg0 portal.MezoBridgeAssetsUnlocked) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAssetsUnlocked", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAssetsUnlocked indicates an expected call of ValidateAssetsUnlocked.
func (mr *MockMezoBridgeMockRecorder) ValidateAssetsUnlocked(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAssetsUnlocked", reflect.TypeOf((*MockMezoBridge)(nil).ValidateAssetsUnlocked), arg0)
}

// BridgeValidatorIDs mocks base method.
func (m *MockMezoBridge) BridgeValidatorIDs(arg0 common.Address) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeValidatorIDs", arg0)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeValidatorIDs indicates an expected call of ValidatorIDs.
func (mr *MockMezoBridgeMockRecorder) BridgeValidatorIDs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeValidatorIDs", reflect.TypeOf((*MockMezoBridge)(nil).BridgeValidatorIDs), arg0)
}
