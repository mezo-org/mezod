// Code generated by MockGen. DO NOT EDIT.
// Source: bridge-worker/server.go
//
// Generated by this command:
//
//	mockgen -source=bridge-worker/server.go -destination=bridge-worker/mock_store_test.go -package=bridgeworker Store
//

// Package bridgeworker is a generated GoMock package.
package bridgeworker

import (
	reflect "reflect"

	math "cosmossdk.io/math"
	types "github.com/mezo-org/mezod/x/bridge/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// SaveAttestation mocks base method.
func (m *MockStore) SaveAttestation(entry *types.AssetsUnlockedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAttestation", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAttestation indicates an expected call of SaveAttestation.
func (mr *MockStoreMockRecorder) SaveAttestation(entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAttestation", reflect.TypeOf((*MockStore)(nil).SaveAttestation), entry)
}

// SaveSignature mocks base method.
func (m *MockStore) SaveSignature(unlockSequence math.Int, sig string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSignature", unlockSequence, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSignature indicates an expected call of SaveSignature.
func (mr *MockStoreMockRecorder) SaveSignature(unlockSequence, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSignature", reflect.TypeOf((*MockStore)(nil).SaveSignature), unlockSequence, sig)
}
