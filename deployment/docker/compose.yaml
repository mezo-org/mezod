---
x-volumes: &volumes
  volumes:
    - type: bind
      source: ${LOCAL_BIND_PATH}
      target: ${MEZOD_HOME}

x-envfile: &envfile
  env_file:
    - ${NETWORK}.env

x-platform: &platform
  platform: linux/amd64


services:
  #
  # SECTION: operations
  #
  cli:
    <<: [*platform, *envfile, *volumes]
    container_name: cli
    image: ${DOCKER_IMAGE}
    deploy:
      # Make sure that the service won't run for "docker compose up".
      # It is intended to be run manually.
      replicas: 0
    entrypoint: ["/busybox/sh"]
    working_dir: ${MEZOD_HOME}
    networks:
      mezo:
        ipv4_address: 10.55.0.2

  #
  # PHASE: initialization
  #
  init:
    <<: [*platform, *envfile, *volumes]
    container_name: init
    image: ${DOCKER_IMAGE}
    command: ["/init.sh"]
    restart: on-failure:2
    networks:
      mezo:
        ipv4_address: 10.55.0.3

  #
  # PHASE: runtime
  #
  ethereum-sidecar:
    <<: [*platform]
    container_name: ethereum-sidecar
    image: ${DOCKER_IMAGE}
    command:
      - mezod
      - ethereum-sidecar
      - --log_format=${MEZOD_LOG_FORMAT}
      - --ethereum-sidecar.server.ethereum-node-address=${MEZOD_ETHEREUM_SIDECAR_SERVER_ETHEREUM_NODE_ADDRESS}
    restart: always
    depends_on:
      init:
        condition: service_completed_successfully
    expose:
      - 7500
    cap_drop:
      - ALL
    networks:
      mezo:
        ipv4_address: 10.55.0.4

  connect-sidecar:
    # Dockerfile: https://github.com/skip-mev/connect/blob/main/contrib/images/connect.sidecar.prod.Dockerfile
    <<: [*platform]
    container_name: connect-sidecar
    image: ghcr.io/skip-mev/connect-sidecar:v2.1.1
    entrypoint: []
    command:
      - connect
      - --log-disable-file-rotation
      - --port=${CONNECT_SIDECAR_PORT}
      # - --metrics-enabled
      # - --metrics-prometheus-address=${CONNECT_SIDECAR_METRICS_PROMETHEUS_ADDRESS}
      - --market-map-endpoint=mezod:9090
    restart: always
    depends_on:
      init:
        condition: service_completed_successfully
    cap_drop:
      - ALL
    networks:
      mezo:
        ipv4_address: 10.55.0.5

  mezod:
    <<: [*platform, *envfile, *volumes]
    container_name: mezod
    image: ${DOCKER_IMAGE}
    command: ["/start.sh"]
    restart: always
    ports:
      - 26656:26656  # p2p
      - 26657:26657  # rpc
      - 1317:1317    # api
      - 9090:9090    # grpc
      - 8545:8545    # json-rpc
      - 8546:8546    # json-rpc-ws
      - 6065:6065    # metrics
    depends_on:
      init:
        condition: service_completed_successfully
      ethereum-sidecar:
        condition: service_started
      connect-sidecar:
        condition: service_started
    healthcheck:
      test: ["CMD", "echo", "${MEZOD_HOME}/config/genesis.json"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 1s
      start_interval: 1s
    cap_drop:
      - ALL
    networks:
      mezo:
        ipv4_address: 10.55.0.6

networks:
  mezo:
    driver: bridge
    ipam:
      config:
        - subnet: 10.55.0.0/16
          gateway: 10.55.0.1
