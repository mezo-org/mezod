---
x-volumes: &volumes
  volumes:
    - type: bind
      source: ./tmp/storage
      target: ${MEZOD_HOME}

services:
  #
  # SECTION: management
  #
  cli:
    container_name: cli
    image: busybox
    platform: linux/amd64
    deploy:
      # Make sure that the service won't run for "docker compose up".
      # It is intended to be run manually.
      replicas: 0
    command:
      - sh
      - -c
      - |
        sleep 1 && echo "cli" && echo "cli: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> /data/storage.txt
    <<: *volumes
    networks:
      - mezo

  #
  # SECTION: initialization
  #
  init:
    container_name: init
    image: mezod
    platform: linux/amd64
    command:
      - mezod
      - init
      - ${MEZOD_MONIKER}
      - --chain-id=${MEZOD_CHAIN_ID}
      - --home=${MEZOD_HOME}
      - --keyring-backend=${MEZOD_KEYRING_BACKEND}
    <<: *volumes
    restart: on-failure:3
    networks:
      - mezo

  # Download genesis.json as long as it is not provided by the "init" service.
  genesis:
    container_name: genesis
    image: mikefarah/yq
    platform: linux/amd64
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo >${MEZOD_HOME}/config/genesis.json
        wget --output-document=/tmp/genesis.raw ${SETUP_GENESIS_URL} || { echo "Genesis file not found!"; exit 1; }
        yq '.data["genesis.json"]' /tmp/genesis.raw > ${MEZOD_HOME}/config/genesis.json
        echo "Genesis file downloaded!"
    <<: *volumes
    depends_on:
      init:
        condition: service_completed_successfully

  #
  # SECTION: runtime
  #
  ethereum-sidecar:
    container_name: ethereum-sidecar
    image: mezod
    platform: linux/amd64
    command:
      - mezod
      - ethereum-sidecar
      - --log_format=${MEZOD_LOG_FORMAT}
      - --ethereum-sidecar.server.ethereum-node-address=${MEZOD_ETHEREUM_SIDECAR_SERVER_ETHEREUM_NODE_ADDRESS}
    # restart: always
    deploy:
      resources:
        reservations: # TODO: verify on Linux
          cpus: '1'
          memory: 100M
    depends_on:
      init:
        condition: service_completed_successfully
      genesis:
        condition: service_completed_successfully
    expose:
      - 7500
    networks:
      - mezo
    cap_drop:
      - ALL

  mezod:
    container_name: mezod
    image: mezod
    platform: linux/amd64
    command:
      - mezod
      - start
      - --log_format=${MEZOD_LOG_FORMAT}
      - --chain-id=${MEZOD_CHAIN_ID}
      - --home=${MEZOD_HOME}
      - --keyring-backend=${MEZOD_KEYRING_BACKEND}
      - --moniker=${MEZOD_MONIKER}
      - --p2p.seeds=${MEZOD_P2P_SEEDS}
      - --ethereum-sidecar.client.server-address=${MEZOD_ETHEREUM_SIDECAR_CLIENT_SERVER_ADDRESS}
    <<: *volumes
    # restart: always
    deploy:
      resources:
        reservations: # TODO: verify on Linux
          cpus: '1'
          memory: 100M
    ports:
      - 26656:26656 # p2p
      - 26657:26657 # rpc
      - 1317:1317   # api
      - 9090:9090   # grpc
      - 8545:8545   # json-rpc
      - 8546:8546   # json-rpc-ws
    networks:
      - mezo
    depends_on:
      init:
        condition: service_completed_successfully
      genesis:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "cat", "${MEZOD_HOME}/config/genesis.json"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 1s
      start_interval: 1s
    cap_drop:
      - ALL

  connect-sidecar:
    container_name: connect-sidecar
    image: ghcr.io/skip-mev/connect-sidecar:v2.1.1
    # Dockerfile: https://github.com/skip-mev/connect/blob/main/contrib/images/connect.sidecar.prod.Dockerfile
    platform: linux/amd64
    entrypoint: []
    command:
      - connect
      - --log-disable-file-rotation
      - --port=${CONNECT_SIDECAR_PORT}
      # - --metrics-enabled
      # - --metrics-prometheus-address=${CONNECT_SIDECAR_METRICS_PROMETHEUS_ADDRESS}
      - --market-map-endpoint=mezod:9090
    depends_on:
      mezod:
        condition: service_healthy
    networks:
      - mezo
    cap_drop:
      - ALL

networks:
  mezo:
    driver: bridge


