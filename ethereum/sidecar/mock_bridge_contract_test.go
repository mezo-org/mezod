// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mezo-org/mezod/ethereum (interfaces: BridgeContract)
//
// Generated by this command:
//
//	mockgen . BridgeContract
//

// Package mock_ethereum is a generated GoMock package.
package sidecar

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	portal "github.com/mezo-org/mezod/ethereum/bindings/portal"
	abi "github.com/mezo-org/mezod/ethereum/bindings/portal/sepolia/gen/abi"
	gomock "go.uber.org/mock/gomock"
)

// MockBridgeContract is a mock of BridgeContract interface.
type MockBridgeContract struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeContractMockRecorder
	isgomock struct{}
}

// MockBridgeContractMockRecorder is the mock recorder for MockBridgeContract.
type MockBridgeContractMockRecorder struct {
	mock *MockBridgeContract
}

// NewMockBridgeContract creates a new mock instance.
func NewMockBridgeContract(ctrl *gomock.Controller) *MockBridgeContract {
	mock := &MockBridgeContract{ctrl: ctrl}
	mock.recorder = &MockBridgeContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridgeContract) EXPECT() *MockBridgeContractMockRecorder {
	return m.recorder
}

// AttestBridgeOut mocks base method.
func (m *MockBridgeContract) AttestBridgeOut(assetsUnlocked *portal.MezoBridgeAssetsUnlocked) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttestBridgeOut", assetsUnlocked)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestBridgeOut indicates an expected call of AttestBridgeOut.
func (mr *MockBridgeContractMockRecorder) AttestBridgeOut(assetsUnlocked any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestBridgeOut", reflect.TypeOf((*MockBridgeContract)(nil).AttestBridgeOut), assetsUnlocked)
}

// Attestations mocks base method.
func (m *MockBridgeContract) Attestations(hash [32]byte) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attestations", hash)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attestations indicates an expected call of Attestations.
func (mr *MockBridgeContractMockRecorder) Attestations(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attestations", reflect.TypeOf((*MockBridgeContract)(nil).Attestations), hash)
}

// ConfirmedUnlocks mocks base method.
func (m *MockBridgeContract) ConfirmedUnlocks(sequenceNumber *big.Int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmedUnlocks", sequenceNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmedUnlocks indicates an expected call of ConfirmedUnlocks.
func (mr *MockBridgeContractMockRecorder) ConfirmedUnlocks(sequenceNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmedUnlocks", reflect.TypeOf((*MockBridgeContract)(nil).ConfirmedUnlocks), sequenceNumber)
}

// PastAssetsLockedEvents mocks base method.
func (m *MockBridgeContract) PastAssetsLockedEvents(startBlock uint64, endBlock *uint64, sequenceNumber []*big.Int, recipient, token []common.Address) ([]*portal.MezoBridgeAssetsLocked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PastAssetsLockedEvents", startBlock, endBlock, sequenceNumber, recipient, token)
	ret0, _ := ret[0].([]*portal.MezoBridgeAssetsLocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PastAssetsLockedEvents indicates an expected call of PastAssetsLockedEvents.
func (mr *MockBridgeContractMockRecorder) PastAssetsLockedEvents(startBlock, endBlock, sequenceNumber, recipient, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PastAssetsLockedEvents", reflect.TypeOf((*MockBridgeContract)(nil).PastAssetsLockedEvents), startBlock, endBlock, sequenceNumber, recipient, token)
}

// PastAssetsUnlockConfirmedEvents mocks base method.
func (m *MockBridgeContract) PastAssetsUnlockConfirmedEvents(startBlock uint64, endBlock *uint64, unlockSequenceNumber []*big.Int, recipient [][]byte, token []common.Address) ([]*portal.MezoBridgeAssetsUnlockConfirmed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PastAssetsUnlockConfirmedEvents", startBlock, endBlock, unlockSequenceNumber, recipient, token)
	ret0, _ := ret[0].([]*portal.MezoBridgeAssetsUnlockConfirmed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PastAssetsUnlockConfirmedEvents indicates an expected call of PastAssetsUnlockConfirmedEvents.
func (mr *MockBridgeContractMockRecorder) PastAssetsUnlockConfirmedEvents(startBlock, endBlock, unlockSequenceNumber, recipient, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PastAssetsUnlockConfirmedEvents", reflect.TypeOf((*MockBridgeContract)(nil).PastAssetsUnlockConfirmedEvents), startBlock, endBlock, unlockSequenceNumber, recipient, token)
}

// ValidateAssetsUnlocked mocks base method.
func (m *MockBridgeContract) ValidateAssetsUnlocked(assetsUnlocked abi.MezoBridgeAssetsUnlocked) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAssetsUnlocked", assetsUnlocked)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAssetsUnlocked indicates an expected call of ValidateAssetsUnlocked.
func (mr *MockBridgeContractMockRecorder) ValidateAssetsUnlocked(assetsUnlocked any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAssetsUnlocked", reflect.TypeOf((*MockBridgeContract)(nil).ValidateAssetsUnlocked), assetsUnlocked)
}

// ValidatorIDs mocks base method.
func (m *MockBridgeContract) ValidatorIDs(address common.Address) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorIDs", address)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorIDs indicates an expected call of ValidatorIDs.
func (mr *MockBridgeContractMockRecorder) ValidatorIDs(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorIDs", reflect.TypeOf((*MockBridgeContract)(nil).ValidatorIDs), address)
}

// BridgeValidatorsCount mocks base method.
func (m *MockBridgeContract) BridgeValidatorsCount() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeValidatorsCount")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeValidatorsCount indicates an expected call of BridgeValidatorsCount.
func (mr *MockBridgeContractMockRecorder) BridgeValidatorsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeValidatorsCount", reflect.TypeOf((*MockBridgeContract)(nil).BridgeValidatorsCount))
}
