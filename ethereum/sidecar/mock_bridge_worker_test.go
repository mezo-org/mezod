// Code generated by MockGen. DO NOT EDIT.
// Source: ethereum/sidecar/batch_attestation.go
//
// Generated by this command:
//
//	mockgen -source=ethereum/sidecar/batch_attestation.go -destination=ethereum/sidecar/mock_bridge_worker_test.go -package=sidecar BridgeWorker
//

// Package sidecar is a generated GoMock package.
package sidecar

import (
	reflect "reflect"

	types "github.com/mezo-org/mezod/bridge-worker/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBridgeWorker is a mock of BridgeWorker interface.
type MockBridgeWorker struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeWorkerMockRecorder
	isgomock struct{}
}

// MockBridgeWorkerMockRecorder is the mock recorder for MockBridgeWorker.
type MockBridgeWorkerMockRecorder struct {
	mock *MockBridgeWorker
}

// NewMockBridgeWorker creates a new mock instance.
func NewMockBridgeWorker(ctrl *gomock.Controller) *MockBridgeWorker {
	mock := &MockBridgeWorker{ctrl: ctrl}
	mock.recorder = &MockBridgeWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridgeWorker) EXPECT() *MockBridgeWorkerMockRecorder {
	return m.recorder
}

// SubmitSignature mocks base method.
func (m *MockBridgeWorker) SubmitSignature(attestation *types.AssetsUnlocked, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSignature", attestation, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitSignature indicates an expected call of SubmitSignature.
func (mr *MockBridgeWorkerMockRecorder) SubmitSignature(attestation, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSignature", reflect.TypeOf((*MockBridgeWorker)(nil).SubmitSignature), attestation, signature)
}
