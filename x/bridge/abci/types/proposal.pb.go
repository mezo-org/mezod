// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mezo/bridge/v1/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/mezo-org/mezod/x/bridge/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InjectedTx defines the bridge-specific pseudo-tx used to inject previous-block
// vote extensions along with a sequence of canonical AssetsLocked events
// into the current block proposal.
type InjectedTx struct {
	// assets_locked_events is a list of canonical AssetsLockedEvent forming
	// a sequence strictly increasing by 1. This list is derived from the
	// extended_commit_info field.
	AssetsLockedEvents []types.AssetsLockedEvent `protobuf:"bytes,1,rep,name=assets_locked_events,json=assetsLockedEvents,proto3" json:"assets_locked_events"`
	// extended_commit_info is the extended commit info of the previous block.
	// It holds the vote extensions that are used to derive the assets_locked_events.
	ExtendedCommitInfo []byte `protobuf:"bytes,2,opt,name=extended_commit_info,json=extendedCommitInfo,proto3" json:"extended_commit_info,omitempty"`
}

func (m *InjectedTx) Reset()         { *m = InjectedTx{} }
func (m *InjectedTx) String() string { return proto.CompactTextString(m) }
func (*InjectedTx) ProtoMessage()    {}
func (*InjectedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef15b170ac62f07, []int{0}
}
func (m *InjectedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InjectedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InjectedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InjectedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectedTx.Merge(m, src)
}
func (m *InjectedTx) XXX_Size() int {
	return m.Size()
}
func (m *InjectedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectedTx.DiscardUnknown(m)
}

var xxx_messageInfo_InjectedTx proto.InternalMessageInfo

func (m *InjectedTx) GetAssetsLockedEvents() []types.AssetsLockedEvent {
	if m != nil {
		return m.AssetsLockedEvents
	}
	return nil
}

func (m *InjectedTx) GetExtendedCommitInfo() []byte {
	if m != nil {
		return m.ExtendedCommitInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*InjectedTx)(nil), "mezo.bridge.v1.InjectedTx")
}

func init() { proto.RegisterFile("mezo/bridge/v1/proposal.proto", fileDescriptor_1ef15b170ac62f07) }

var fileDescriptor_1ef15b170ac62f07 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0x4d, 0xad, 0xca,
	0xd7, 0x4f, 0x2a, 0xca, 0x4c, 0x49, 0x4f, 0xd5, 0x2f, 0x33, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0xc8,
	0x2f, 0x4e, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x03, 0x49, 0xeb, 0x41, 0xa4,
	0xf5, 0xca, 0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x52, 0xfa, 0x20, 0x16, 0x44, 0x95,
	0x94, 0x34, 0x9a, 0x21, 0x50, 0xf5, 0x60, 0x49, 0xa5, 0x99, 0x8c, 0x5c, 0x5c, 0x9e, 0x79, 0x59,
	0xa9, 0xc9, 0x25, 0xa9, 0x29, 0x21, 0x15, 0x42, 0x91, 0x5c, 0x22, 0x89, 0xc5, 0xc5, 0xa9, 0x25,
	0xc5, 0xf1, 0x39, 0xf9, 0xc9, 0xd9, 0xa9, 0x29, 0xf1, 0xa9, 0x65, 0xa9, 0x79, 0x25, 0xc5, 0x12,
	0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x8a, 0x7a, 0xa8, 0x16, 0xea, 0x39, 0x82, 0xd5, 0xfa, 0x80,
	0x95, 0xba, 0x82, 0x54, 0x3a, 0xb1, 0x9c, 0xb8, 0x27, 0xcf, 0x10, 0x24, 0x94, 0x88, 0x2e, 0x51,
	0x2c, 0x64, 0xc0, 0x25, 0x92, 0x5a, 0x51, 0x92, 0x9a, 0x97, 0x92, 0x9a, 0x12, 0x9f, 0x9c, 0x9f,
	0x9b, 0x9b, 0x59, 0x12, 0x9f, 0x99, 0x97, 0x96, 0x2f, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x13, 0x24,
	0x04, 0x93, 0x73, 0x06, 0x4b, 0x79, 0xe6, 0xa5, 0xe5, 0x3b, 0xb9, 0x9f, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7,
	0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x6e, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e,
	0xae, 0x3e, 0xc8, 0x49, 0xba, 0xf9, 0x45, 0xe9, 0x60, 0x46, 0x8a, 0x7e, 0x05, 0xcc, 0xa7, 0x89,
	0x49, 0xc9, 0x99, 0xfa, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0xbf, 0x1a, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x16, 0x3b, 0x7c, 0xe2, 0x4f, 0x01, 0x00, 0x00,
}

func (m *InjectedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InjectedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InjectedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedCommitInfo) > 0 {
		i -= len(m.ExtendedCommitInfo)
		copy(dAtA[i:], m.ExtendedCommitInfo)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ExtendedCommitInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetsLockedEvents) > 0 {
		for iNdEx := len(m.AssetsLockedEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetsLockedEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InjectedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetsLockedEvents) > 0 {
		for _, e := range m.AssetsLockedEvents {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = len(m.ExtendedCommitInfo)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InjectedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InjectedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InjectedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetsLockedEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetsLockedEvents = append(m.AssetsLockedEvents, types.AssetsLockedEvent{})
			if err := m.AssetsLockedEvents[len(m.AssetsLockedEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCommitInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedCommitInfo = append(m.ExtendedCommitInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtendedCommitInfo == nil {
				m.ExtendedCommitInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
