// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/dualstaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryStakeRequest struct {
	Staker  string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	StakeId string `protobuf:"bytes,2,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
}

func (m *QueryStakeRequest) Reset()         { *m = QueryStakeRequest{} }
func (m *QueryStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRequest) ProtoMessage()    {}
func (*QueryStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{0}
}
func (m *QueryStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRequest.Merge(m, src)
}
func (m *QueryStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRequest proto.InternalMessageInfo

func (m *QueryStakeRequest) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *QueryStakeRequest) GetStakeId() string {
	if m != nil {
		return m.StakeId
	}
	return ""
}

type QueryStakeResponse struct {
	Stake *Stake `protobuf:"bytes,1,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (m *QueryStakeResponse) Reset()         { *m = QueryStakeResponse{} }
func (m *QueryStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeResponse) ProtoMessage()    {}
func (*QueryStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{1}
}
func (m *QueryStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeResponse.Merge(m, src)
}
func (m *QueryStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeResponse proto.InternalMessageInfo

func (m *QueryStakeResponse) GetStake() *Stake {
	if m != nil {
		return m.Stake
	}
	return nil
}

type QueryDelegationRequest struct {
	Staker       string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	DelegationId string `protobuf:"bytes,2,opt,name=delegation_id,json=delegationId,proto3" json:"delegation_id,omitempty"`
}

func (m *QueryDelegationRequest) Reset()         { *m = QueryDelegationRequest{} }
func (m *QueryDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationRequest) ProtoMessage()    {}
func (*QueryDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{2}
}
func (m *QueryDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationRequest.Merge(m, src)
}
func (m *QueryDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationRequest proto.InternalMessageInfo

func (m *QueryDelegationRequest) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *QueryDelegationRequest) GetDelegationId() string {
	if m != nil {
		return m.DelegationId
	}
	return ""
}

type QueryDelegationResponse struct {
	Delegation *Delegation `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation,omitempty"`
}

func (m *QueryDelegationResponse) Reset()         { *m = QueryDelegationResponse{} }
func (m *QueryDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationResponse) ProtoMessage()    {}
func (*QueryDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{3}
}
func (m *QueryDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationResponse.Merge(m, src)
}
func (m *QueryDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationResponse proto.InternalMessageInfo

func (m *QueryDelegationResponse) GetDelegation() *Delegation {
	if m != nil {
		return m.Delegation
	}
	return nil
}

// QueryStakesByStakerRequest is the request type for the Query/StakesByStaker RPC method
type QueryStakesByStakerRequest struct {
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *QueryStakesByStakerRequest) Reset()         { *m = QueryStakesByStakerRequest{} }
func (m *QueryStakesByStakerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakesByStakerRequest) ProtoMessage()    {}
func (*QueryStakesByStakerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{4}
}
func (m *QueryStakesByStakerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakesByStakerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakesByStakerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakesByStakerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakesByStakerRequest.Merge(m, src)
}
func (m *QueryStakesByStakerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakesByStakerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakesByStakerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakesByStakerRequest proto.InternalMessageInfo

func (m *QueryStakesByStakerRequest) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

// QueryStakesByStakerResponse is the response type for the Query/StakesByStaker RPC method
type QueryStakesByStakerResponse struct {
	Stakes []*Stake `protobuf:"bytes,1,rep,name=stakes,proto3" json:"stakes,omitempty"`
}

func (m *QueryStakesByStakerResponse) Reset()         { *m = QueryStakesByStakerResponse{} }
func (m *QueryStakesByStakerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakesByStakerResponse) ProtoMessage()    {}
func (*QueryStakesByStakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{5}
}
func (m *QueryStakesByStakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakesByStakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakesByStakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakesByStakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakesByStakerResponse.Merge(m, src)
}
func (m *QueryStakesByStakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakesByStakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakesByStakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakesByStakerResponse proto.InternalMessageInfo

func (m *QueryStakesByStakerResponse) GetStakes() []*Stake {
	if m != nil {
		return m.Stakes
	}
	return nil
}

// QueryDelegationsByStakerRequest is the request type for the Query/DelegationsByStaker RPC method
type QueryDelegationsByStakerRequest struct {
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *QueryDelegationsByStakerRequest) Reset()         { *m = QueryDelegationsByStakerRequest{} }
func (m *QueryDelegationsByStakerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationsByStakerRequest) ProtoMessage()    {}
func (*QueryDelegationsByStakerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{6}
}
func (m *QueryDelegationsByStakerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationsByStakerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationsByStakerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationsByStakerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationsByStakerRequest.Merge(m, src)
}
func (m *QueryDelegationsByStakerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationsByStakerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationsByStakerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationsByStakerRequest proto.InternalMessageInfo

func (m *QueryDelegationsByStakerRequest) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

// QueryDelegationsByStakerResponse is the response type for the Query/DelegationsByStaker RPC method
type QueryDelegationsByStakerResponse struct {
	Delegations []*Delegation `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (m *QueryDelegationsByStakerResponse) Reset()         { *m = QueryDelegationsByStakerResponse{} }
func (m *QueryDelegationsByStakerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationsByStakerResponse) ProtoMessage()    {}
func (*QueryDelegationsByStakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63de00f5203f239, []int{7}
}
func (m *QueryDelegationsByStakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationsByStakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationsByStakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationsByStakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationsByStakerResponse.Merge(m, src)
}
func (m *QueryDelegationsByStakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationsByStakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationsByStakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationsByStakerResponse proto.InternalMessageInfo

func (m *QueryDelegationsByStakerResponse) GetDelegations() []*Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryStakeRequest)(nil), "evmos.dualstaking.v1.QueryStakeRequest")
	proto.RegisterType((*QueryStakeResponse)(nil), "evmos.dualstaking.v1.QueryStakeResponse")
	proto.RegisterType((*QueryDelegationRequest)(nil), "evmos.dualstaking.v1.QueryDelegationRequest")
	proto.RegisterType((*QueryDelegationResponse)(nil), "evmos.dualstaking.v1.QueryDelegationResponse")
	proto.RegisterType((*QueryStakesByStakerRequest)(nil), "evmos.dualstaking.v1.QueryStakesByStakerRequest")
	proto.RegisterType((*QueryStakesByStakerResponse)(nil), "evmos.dualstaking.v1.QueryStakesByStakerResponse")
	proto.RegisterType((*QueryDelegationsByStakerRequest)(nil), "evmos.dualstaking.v1.QueryDelegationsByStakerRequest")
	proto.RegisterType((*QueryDelegationsByStakerResponse)(nil), "evmos.dualstaking.v1.QueryDelegationsByStakerResponse")
}

func init() { proto.RegisterFile("evmos/dualstaking/v1/query.proto", fileDescriptor_a63de00f5203f239) }

var fileDescriptor_a63de00f5203f239 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x45, 0x29, 0xf0, 0x0a, 0x48, 0x3c, 0xaa, 0x12, 0x5c, 0x64, 0xac, 0x43, 0xa8,
	0x1d, 0xa8, 0xaf, 0x4e, 0x68, 0x11, 0x62, 0x41, 0x11, 0x02, 0x3a, 0x12, 0xc4, 0x02, 0x43, 0xe4,
	0xe0, 0xc3, 0x58, 0x4d, 0x7c, 0xa9, 0xcf, 0x89, 0x08, 0x55, 0x16, 0x36, 0x36, 0x24, 0xbe, 0x01,
	0x33, 0x7c, 0x08, 0x36, 0xc6, 0x4a, 0x2c, 0x8c, 0x28, 0xe1, 0x83, 0xa0, 0x9c, 0xaf, 0xd8, 0x49,
	0xdc, 0x3a, 0x5d, 0x92, 0xb3, 0xf3, 0xff, 0xbf, 0xf7, 0x7b, 0xff, 0x3c, 0x1b, 0x2c, 0xde, 0xef,
	0x08, 0xc9, 0xbc, 0x9e, 0xdb, 0x96, 0xb1, 0xbb, 0x1f, 0x84, 0x3e, 0xeb, 0x3b, 0xec, 0xa0, 0xc7,
	0xa3, 0x81, 0xdd, 0x8d, 0x44, 0x2c, 0x70, 0x55, 0x29, 0xec, 0x8c, 0xc2, 0xee, 0x3b, 0x06, 0xcd,
	0xf5, 0xf9, 0x3c, 0xe4, 0x32, 0x90, 0x89, 0xd3, 0x58, 0xf5, 0x85, 0x2f, 0xd4, 0x91, 0x4d, 0x4e,
	0xfa, 0xee, 0x4d, 0x5f, 0x08, 0xbf, 0xcd, 0x99, 0xdb, 0x0d, 0x98, 0x1b, 0x86, 0x22, 0x76, 0xe3,
	0x40, 0x84, 0xda, 0x43, 0x9f, 0xc0, 0xd5, 0xe7, 0x93, 0xe6, 0x2f, 0x62, 0x77, 0x9f, 0x37, 0xf8,
	0x41, 0x8f, 0xcb, 0x18, 0xd7, 0x60, 0x79, 0xd2, 0x84, 0x47, 0x15, 0x62, 0x91, 0xcd, 0x8b, 0x0d,
	0x7d, 0x85, 0x37, 0xe0, 0x82, 0x3a, 0x35, 0x03, 0xaf, 0xb2, 0xa4, 0x7e, 0x39, 0xaf, 0xae, 0xf7,
	0x3c, 0xfa, 0x14, 0x30, 0x5b, 0x47, 0x76, 0x45, 0x28, 0x39, 0x3a, 0x50, 0x56, 0x02, 0x55, 0x67,
	0xa5, 0xba, 0x6e, 0xe7, 0xcd, 0x66, 0x27, 0x9e, 0x44, 0x49, 0x5f, 0xc2, 0x9a, 0x2a, 0xf4, 0x98,
	0xb7, 0xb9, 0xaf, 0x50, 0x8b, 0xa8, 0x6e, 0xc3, 0x65, 0xef, 0xbf, 0x38, 0x45, 0xbb, 0x94, 0xde,
	0xdc, 0xf3, 0xe8, 0x6b, 0xb8, 0x3e, 0x57, 0x56, 0x43, 0x3e, 0x02, 0x48, 0xa5, 0x9a, 0xd4, 0xca,
	0x27, 0xcd, 0xb8, 0x33, 0x1e, 0x7a, 0x0f, 0x8c, 0x74, 0x78, 0x59, 0x4f, 0xbe, 0xa3, 0x02, 0x6e,
	0xda, 0x80, 0xf5, 0x5c, 0x97, 0xc6, 0xaa, 0x69, 0x9b, 0xac, 0x10, 0xeb, 0x5c, 0x51, 0x78, 0x5a,
	0x4a, 0x1f, 0xc0, 0xad, 0x99, 0x31, 0x17, 0xc6, 0x79, 0x0b, 0xd6, 0xc9, 0x56, 0xcd, 0x54, 0x87,
	0x95, 0x74, 0xec, 0x63, 0xb0, 0xe2, 0xac, 0xb2, 0xa6, 0xea, 0xb7, 0x32, 0x94, 0x55, 0x23, 0xfc,
	0x44, 0xa0, 0xac, 0x1a, 0xe0, 0x46, 0x7e, 0x89, 0xb9, 0xcd, 0x34, 0x36, 0x8b, 0x85, 0x09, 0x2a,
	0xdd, 0xfa, 0xf8, 0xeb, 0xef, 0x97, 0xa5, 0x0d, 0xbc, 0xc3, 0x3a, 0xfc, 0x83, 0x98, 0x7d, 0x70,
	0xd4, 0xcc, 0xec, 0xf0, 0x78, 0x9b, 0x87, 0xf8, 0x95, 0x00, 0xa4, 0xc4, 0x78, 0xf7, 0x94, 0x3e,
	0x73, 0x9b, 0x69, 0x6c, 0x2d, 0xa8, 0xd6, 0x68, 0xf7, 0x15, 0x9a, 0x83, 0x2c, 0x17, 0x2d, 0xcd,
	0x8a, 0x1d, 0x4e, 0xed, 0xf5, 0x10, 0xbf, 0x13, 0xb8, 0x32, 0xbd, 0x2d, 0xb8, 0x5d, 0x14, 0xc8,
	0xec, 0xff, 0x6f, 0x38, 0x67, 0x70, 0x68, 0xe0, 0x5d, 0x05, 0xbc, 0x8d, 0xf6, 0xc9, 0x59, 0xca,
	0x66, 0x6b, 0xd0, 0x4c, 0x36, 0x49, 0xc7, 0x1a, 0x0d, 0xf1, 0x07, 0x81, 0x6b, 0x39, 0xeb, 0x84,
	0x3b, 0x0b, 0xe5, 0x35, 0x47, 0xbe, 0x7b, 0x56, 0x9b, 0xc6, 0x7f, 0xa8, 0xf0, 0x77, 0xb0, 0x56,
	0x90, 0x77, 0xde, 0x0c, 0xf5, 0x67, 0x3f, 0x47, 0x26, 0x39, 0x1a, 0x99, 0xe4, 0xcf, 0xc8, 0x24,
	0x9f, 0xc7, 0x66, 0xe9, 0x68, 0x6c, 0x96, 0x7e, 0x8f, 0xcd, 0xd2, 0x2b, 0xdb, 0x0f, 0xe2, 0x77,
	0xbd, 0x96, 0xfd, 0x46, 0x74, 0x58, 0xf2, 0x76, 0x4e, 0x3e, 0xfb, 0x4e, 0x95, 0xbd, 0x9f, 0xea,
	0x12, 0x0f, 0xba, 0x5c, 0xb6, 0x96, 0xd5, 0x1b, 0xb7, 0xf6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x72,
	0x6c, 0x15, 0x58, 0x03, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Stake(ctx context.Context, in *QueryStakeRequest, opts ...grpc.CallOption) (*QueryStakeResponse, error)
	Delegation(ctx context.Context, in *QueryDelegationRequest, opts ...grpc.CallOption) (*QueryDelegationResponse, error)
	// StakesByStaker queries all staking positions for a given staker
	StakesByStaker(ctx context.Context, in *QueryStakesByStakerRequest, opts ...grpc.CallOption) (*QueryStakesByStakerResponse, error)
	// DelegationsByStaker queries all delegation positions for a given staker
	DelegationsByStaker(ctx context.Context, in *QueryDelegationsByStakerRequest, opts ...grpc.CallOption) (*QueryDelegationsByStakerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Stake(ctx context.Context, in *QueryStakeRequest, opts ...grpc.CallOption) (*QueryStakeResponse, error) {
	out := new(QueryStakeResponse)
	err := c.cc.Invoke(ctx, "/evmos.dualstaking.v1.Query/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Delegation(ctx context.Context, in *QueryDelegationRequest, opts ...grpc.CallOption) (*QueryDelegationResponse, error) {
	out := new(QueryDelegationResponse)
	err := c.cc.Invoke(ctx, "/evmos.dualstaking.v1.Query/Delegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakesByStaker(ctx context.Context, in *QueryStakesByStakerRequest, opts ...grpc.CallOption) (*QueryStakesByStakerResponse, error) {
	out := new(QueryStakesByStakerResponse)
	err := c.cc.Invoke(ctx, "/evmos.dualstaking.v1.Query/StakesByStaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationsByStaker(ctx context.Context, in *QueryDelegationsByStakerRequest, opts ...grpc.CallOption) (*QueryDelegationsByStakerResponse, error) {
	out := new(QueryDelegationsByStakerResponse)
	err := c.cc.Invoke(ctx, "/evmos.dualstaking.v1.Query/DelegationsByStaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Stake(context.Context, *QueryStakeRequest) (*QueryStakeResponse, error)
	Delegation(context.Context, *QueryDelegationRequest) (*QueryDelegationResponse, error)
	// StakesByStaker queries all staking positions for a given staker
	StakesByStaker(context.Context, *QueryStakesByStakerRequest) (*QueryStakesByStakerResponse, error)
	// DelegationsByStaker queries all delegation positions for a given staker
	DelegationsByStaker(context.Context, *QueryDelegationsByStakerRequest) (*QueryDelegationsByStakerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Stake(ctx context.Context, req *QueryStakeRequest) (*QueryStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (*UnimplementedQueryServer) Delegation(ctx context.Context, req *QueryDelegationRequest) (*QueryDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegation not implemented")
}
func (*UnimplementedQueryServer) StakesByStaker(ctx context.Context, req *QueryStakesByStakerRequest) (*QueryStakesByStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakesByStaker not implemented")
}
func (*UnimplementedQueryServer) DelegationsByStaker(ctx context.Context, req *QueryDelegationsByStakerRequest) (*QueryDelegationsByStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationsByStaker not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.dualstaking.v1.Query/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stake(ctx, req.(*QueryStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Delegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Delegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.dualstaking.v1.Query/Delegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Delegation(ctx, req.(*QueryDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakesByStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakesByStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakesByStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.dualstaking.v1.Query/StakesByStaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakesByStaker(ctx, req.(*QueryStakesByStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationsByStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationsByStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationsByStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.dualstaking.v1.Query/DelegationsByStaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationsByStaker(ctx, req.(*QueryDelegationsByStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evmos.dualstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stake",
			Handler:    _Query_Stake_Handler,
		},
		{
			MethodName: "Delegation",
			Handler:    _Query_Delegation_Handler,
		},
		{
			MethodName: "StakesByStaker",
			Handler:    _Query_StakesByStaker_Handler,
		},
		{
			MethodName: "DelegationsByStaker",
			Handler:    _Query_DelegationsByStaker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evmos/dualstaking/v1/query.proto",
}

func (m *QueryStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeId) > 0 {
		i -= len(m.StakeId)
		copy(dAtA[i:], m.StakeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stake != nil {
		{
			size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationId) > 0 {
		i -= len(m.DelegationId)
		copy(dAtA[i:], m.DelegationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delegation != nil {
		{
			size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakesByStakerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakesByStakerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakesByStakerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakesByStakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakesByStakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakesByStakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakes) > 0 {
		for iNdEx := len(m.Stakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationsByStakerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationsByStakerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationsByStakerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationsByStakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationsByStakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationsByStakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stake != nil {
		l = m.Stake.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DelegationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegation != nil {
		l = m.Delegation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakesByStakerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakesByStakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakes) > 0 {
		for _, e := range m.Stakes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegationsByStakerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegationsByStakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stake == nil {
				m.Stake = &Stake{}
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delegation == nil {
				m.Delegation = &Delegation{}
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakesByStakerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakesByStakerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakesByStakerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakesByStakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakesByStakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakesByStakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakes = append(m.Stakes, &Stake{})
			if err := m.Stakes[len(m.Stakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationsByStakerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationsByStakerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationsByStakerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationsByStakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationsByStakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationsByStakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
